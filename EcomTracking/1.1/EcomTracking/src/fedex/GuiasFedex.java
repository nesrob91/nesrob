/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package fedex;import java.io.ByteArrayOutputStream;import java.math.BigDecimal;import java.math.BigInteger;import java.util.ArrayList;import java.util.GregorianCalendar;import java.util.List;import java.util.Locale;import java.util.logging.Level;import java.util.logging.Logger;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Marshaller;import javax.xml.datatype.XMLGregorianCalendar;import com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl;/*import com.elektra.beans.CredencialesFedex;import com.elektra.beans.DatosGuias;import beans.GuiasResponse;import beans.Piezas;import dao.CredencialesDao;import dao.CredencialesDaoImpl;import dao.GeneralDao;import dao.GeneralDaoImpl;import dao.GuiasDao;import dao.GuiasDaoImpl;import com.fedex.qa.Address;import com.fedex.qa.ClientDetail;import com.fedex.qa.Contact;import com.fedex.qa.ContactAndAddress;import com.fedex.qa.CustomerSpecifiedLabelDetail;import com.fedex.qa.Dimensions;import com.fedex.qa.DropoffType;import com.fedex.qa.FreightShipmentDetail;import com.fedex.qa.FreightShipmentRoleType;import com.fedex.qa.LabelFormatType;import com.fedex.qa.LabelSpecification;import com.fedex.qa.LabelStockType;import com.fedex.qa.LinearUnits;import com.fedex.qa.Localization;import com.fedex.qa.NotificationSeverityType;import com.fedex.qa.PackagingType;import com.fedex.qa.Party;import com.fedex.qa.Payment;import com.fedex.qa.PaymentType;import com.fedex.qa.Payor;import com.fedex.qa.ProcessShipmentReply;import com.fedex.qa.ProcessShipmentRequest;import com.fedex.qa.RequestedPackageLineItem;import com.fedex.qa.RequestedShipment;import com.fedex.qa.ServiceType;import com.fedex.qa.ShipPortType;import com.fedex.qa.ShipService;import com.fedex.qa.ShippingDocumentImageType;import com.fedex.qa.VersionId;import com.fedex.qa.WebAuthenticationCredential;import com.fedex.qa.WebAuthenticationDetail;import com.fedex.qa.Weight;import com.fedex.qa.WeightUnits;import com.elektra.util.GetNodes;*//** * *  *  * @author dparra/eaceves *  */public class GuiasFedex {/*	GuiasDao guiasDao;	CredencialesDao credencialesDao;	GeneralDao generalDao;	CredencialesFedex credencialesFedex;	public GuiasResponse obtenerGuia(DatosGuias datos, boolean desarrollo, int idCajaHdr, String proxy) {		GuiasResponse res = new GuiasResponse();		credencialesDao = new CredencialesDaoImpl();		if (desarrollo) {			System.out.println("\n=============== Generando Guia ===============");			System.out.println("Obteniendo Credenciales FEDEX...");		}		credencialesFedex = credencialesDao.getCredencialesFedex(6, 1);		if (desarrollo)			System.out.println("Generando Guia FEDEX...");		res = generaGuia(datos, credencialesFedex, idCajaHdr, proxy);		return res;			}*//*	public GuiasResponse generaGuia(DatosGuias datosGuias, CredencialesFedex credencialesGuiasFedex, int idCajaHdr, String proxy) {		ByteArrayOutputStream in = new ByteArrayOutputStream();		String request = "";		String response = "";		guiasDao = new GuiasDaoImpl(true);		generalDao = new GeneralDaoImpl();		GuiasResponse guiasResponse = new GuiasResponse();				String ipProxy = proxy;               System.setProperty("http.proxyHost", ipProxy);        System.setProperty("http.proxyPort", "8080");        System.setProperty("https.proxyHost", ipProxy);        System.setProperty("https.proxyPort", "8080");                try{            WebAuthenticationCredential userCredential = new WebAuthenticationCredential();            userCredential.setKey(credencialesGuiasFedex.getKey());            userCredential.setPassword(credencialesGuiasFedex.getPassword());            WebAuthenticationDetail webAuthenticationDetail = new WebAuthenticationDetail();            webAuthenticationDetail.setParentCredential(null);            webAuthenticationDetail.setUserCredential(userCredential);            Localization localization = new Localization();            localization.setLanguageCode(credencialesGuiasFedex.getLanguageCode());            localization.setLocaleCode(credencialesGuiasFedex.getLocalCode());            ClientDetail clientDetail = new ClientDetail();            clientDetail.setAccountNumber(credencialesGuiasFedex.getAccountNumber());            clientDetail.setMeterNumber(credencialesGuiasFedex.getMeterNumber());            clientDetail.setLocalization(localization);            VersionId versionId = new VersionId();            versionId.setServiceId(credencialesGuiasFedex.getServiceId());            versionId.setMajor(Integer.parseInt(credencialesGuiasFedex.getMajor()));            versionId.setIntermediate(Integer.parseInt(credencialesGuiasFedex.getIntermediate()));            versionId.setMinor(Integer.parseInt(credencialesGuiasFedex.getMinor()));            GregorianCalendar calendar = new GregorianCalendar(Locale.ENGLISH);            XMLGregorianCalendar shipTimestamp = new XMLGregorianCalendarImpl(calendar);            Weight weight = new Weight();            weight.setUnits(WeightUnits.KG);            weight.setValue((BigDecimal.valueOf(datosGuias.getPeso())));            List<String> streetLines = new ArrayList<>();            streetLines.add(datosGuias.getDireccionOrigen());            Address address = new Address();            address.setCity(datosGuias.getCiudadOrigen());            address.setCountryCode(datosGuias.getPais3());            address.setCountryName(datosGuias.getPais1());            address.setPostalCode(datosGuias.getCpOrigen());            address.setResidential(datosGuias.isResidencialOrigen());            address.setStateOrProvinceCode(datosGuias.getEstadoOrigen());            address.setStreetLines(streetLines);            Contact contact = new Contact();            contact.setCompanyName(datosGuias.getRazSocOrigen());            contact.setPersonName(datosGuias.getContactoOrigen());            contact.setPhoneNumber(datosGuias.getTelefonoOrigen());            Party shipper = new Party();            shipper.setAddress(address);            shipper.setAccountNumber(credencialesGuiasFedex.getAccountNumber());            shipper.setContact(contact);            streetLines = new ArrayList<>();            streetLines.add(datosGuias.getDireccionDestino());            address = new Address();            address.setCity(datosGuias.getCiudadDestino());            address.setCountryCode(datosGuias.getPais3());            address.setCountryName(datosGuias.getPais1());            address.setPostalCode(datosGuias.getCpDestino());            address.setResidential(datosGuias.isResidencialDestino());            address.setStateOrProvinceCode(datosGuias.getEstadoDestino());            address.setStreetLines(streetLines);            contact = new Contact();            contact.setCompanyName(datosGuias.getRazSocDestino());            contact.setPersonName(datosGuias.getContactoDestino());            contact.setPhoneNumber(datosGuias.getTelefonoDestino());            Party recipient = new Party();            recipient.setAddress(address);            recipient.setAccountNumber(credencialesGuiasFedex.getAccountNumber());            recipient.setContact(contact);            Payor payor = new Payor();            payor.setResponsibleParty(shipper);            Payment payment = new Payment();            payment.setPaymentType(PaymentType.valueOf(credencialesGuiasFedex.getPaymentType()));            payment.setPayor(payor);            ContactAndAddress contactAndAddress = new ContactAndAddress();            contactAndAddress.setAddress(shipper.getAddress());            contactAndAddress.setContact(shipper.getContact());            Dimensions dimensions = new Dimensions();            dimensions.setHeight(BigInteger.valueOf((int)datosGuias.getAlto()));            dimensions.setWidth(BigInteger.valueOf((int)datosGuias.getAncho()));            dimensions.setLength(BigInteger.valueOf((int)datosGuias.getLargo()));            dimensions.setUnits(LinearUnits.valueOf(credencialesGuiasFedex.getDimensionUnits()));            List<RequestedPackageLineItem> lineItems = new ArrayList<>();            List<Piezas> piezas = new ArrayList<>();            piezas = guiasDao.getPiezas(datosGuias.getPedido(), datosGuias.getOrderId(), datosGuias.getCdId(),idCajaHdr);            //lineItems = piezasFedex.getPiezasFedex(piezas);            RequestedPackageLineItem item = new RequestedPackageLineItem();            item.setDimensions(dimensions);            item.setWeight(weight);            item.setItemDescription("Paquete Elektra");            item.setSequenceNumber(BigInteger.valueOf(1));            lineItems.add(item);            FreightShipmentDetail freightShipmentDetail = new FreightShipmentDetail();            freightShipmentDetail.setAlternateBilling(shipper);            freightShipmentDetail.setRole(FreightShipmentRoleType.valueOf(credencialesGuiasFedex.getRole()));            freightShipmentDetail.setFedExFreightBillingContactAndAddress(contactAndAddress);            freightShipmentDetail.setTotalHandlingUnits(BigInteger.valueOf(piezas.size()));            freightShipmentDetail.setShipmentDimensions(dimensions);            CustomerSpecifiedLabelDetail customerSpecifiedLabelDetail = new CustomerSpecifiedLabelDetail();            customerSpecifiedLabelDetail.setTermsAndConditionsLocalization(localization);            LabelSpecification labelSpecification = new LabelSpecification();            labelSpecification.setLabelFormatType(LabelFormatType.valueOf(credencialesGuiasFedex.getLabelFormatType()));            labelSpecification.setImageType(ShippingDocumentImageType.valueOf(credencialesGuiasFedex.getImageType()));            labelSpecification.setLabelStockType(LabelStockType.valueOf(credencialesGuiasFedex.getLabelStockType()));            labelSpecification.setCustomerSpecifiedDetail(customerSpecifiedLabelDetail);            RequestedShipment requestedShipment = new RequestedShipment();            requestedShipment.setShipTimestamp(shipTimestamp);            requestedShipment.setDropoffType(DropoffType.valueOf(credencialesGuiasFedex.getDropOffType()));            requestedShipment.setServiceType(ServiceType.valueOf(guiasDao.getTipoServicioPorPeso((float)datosGuias.getPeso(), (float)datosGuias.getPeso(), 6, 1)));            requestedShipment.setPackagingType(PackagingType.valueOf(credencialesGuiasFedex.getPackagingType()));            requestedShipment.setTotalWeight(weight);            requestedShipment.setShipper(shipper);            requestedShipment.setRecipient(recipient);            requestedShipment.setShippingChargesPayment(payment);            requestedShipment.setFreightShipmentDetail(freightShipmentDetail);            requestedShipment.setLabelSpecification(labelSpecification);            requestedShipment.setPackageCount(BigInteger.valueOf(piezas.size()));            requestedShipment.setRequestedPackageLineItems(lineItems);            ProcessShipmentRequest processShipmentRequest = new ProcessShipmentRequest();            processShipmentRequest.setWebAuthenticationDetail(webAuthenticationDetail);            processShipmentRequest.setVersion(versionId);            processShipmentRequest.setClientDetail(clientDetail);            processShipmentRequest.setRequestedShipment(requestedShipment);            ProcessShipmentReply processShipmentReply = new ProcessShipmentReply();            processShipmentReply = processShipment(processShipmentRequest);            JAXBContext jaxbContext;            try {                                    jaxbContext = JAXBContext.newInstance(ProcessShipmentRequest.class);                    Marshaller jaxbMarshaller = jaxbContext.createMarshaller();                    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);                    in = new ByteArrayOutputStream();                    jaxbMarshaller.marshal(processShipmentRequest, in);                    request = new String(in.toByteArray());                    jaxbContext = JAXBContext.newInstance(ProcessShipmentReply.class);                    jaxbMarshaller = jaxbContext.createMarshaller();                    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);                    in = new ByteArrayOutputStream();                    jaxbMarshaller.marshal(processShipmentReply, in);                    response = new String(in.toByteArray());                } catch (JAXBException ex) {                                        Logger.getLogger(GuiasFedex.class.getName()).log(Level.SEVERE, null, ex);                }            if(processShipmentReply.getHighestSeverity() == NotificationSeverityType.FAILURE || processShipmentReply.getHighestSeverity() == NotificationSeverityType.ERROR){                String refField1="";                for(int i=0; i < processShipmentReply.getNotifications().size();i++){                    if(i>0){                        refField1 += ", "+processShipmentReply.getNotifications().get(i).getCode();                    }                    else{                        refField1 += processShipmentReply.getNotifications().get(i).getCode();                    }                }                guiasResponse.setNumGuia("");                guiasResponse.setRefField1(refField1);                guiasResponse.setIdEstatusGuia(-1);                generalDao.insXml("-1", refField1, refField1, request, response, datosGuias.getPedido(), datosGuias.getOrderId(), datosGuias.getCdId(), datosGuias.getIdCarrier(), "Guias Fedex", idCajaHdr+"");            }            else{                GetNodes getnodes = new GetNodes();                List<String> listaNodos = new ArrayList<>();                listaNodos.add("Image");                getnodes.setstring(response);                List <String> etiquetaList = new ArrayList<>();                etiquetaList = getnodes.getNodes(listaNodos);                guiasDao.insEtiqueta(datosGuias                        , processShipmentReply.getCompletedShipmentDetail().getCompletedPackageDetails().get(0).getTrackingIds().get(0).getTrackingNumber()                        , etiquetaList.get(0)                        , idCajaHdr                );                                guiasResponse.setNumGuia(processShipmentReply.getCompletedShipmentDetail().getCompletedPackageDetails().get(0).getTrackingIds().get(0).getTrackingNumber());                guiasResponse.setRefField1("");                guiasResponse.setEtiqueta(etiquetaList.get(0));                guiasResponse.setIdEstatusGuia(10);                                generalDao.insXml("10"                        , processShipmentReply.getCompletedShipmentDetail().getCompletedPackageDetails().get(0).getTrackingIds().get(0).getTrackingNumber()                        , processShipmentReply.getCompletedShipmentDetail().getCompletedPackageDetails().get(0).getTrackingIds().get(0).getTrackingNumber()                        , request, response, datosGuias.getPedido(), datosGuias.getOrderId(), datosGuias.getCdId(), datosGuias.getIdCarrier(), "Guias Fedex"                        , idCajaHdr+""                );            }        }catch(Exception e){            guiasResponse.setNumGuia("");            guiasResponse.setRefField1(e.toString());            guiasResponse.setIdEstatusGuia(-1);            generalDao.insXml("-1", e.getMessage(), e.getMessage(), request, response, datosGuias.getPedido(), datosGuias.getOrderId(), datosGuias.getCdId(), datosGuias.getIdCarrier(), "Guias fedex", idCajaHdr+"");        }		return guiasResponse;	}	private static ProcessShipmentReply processShipment(ProcessShipmentRequest processShipmentRequest) {		ShipService service = new ShipService();		ShipPortType port = service.getShipServicePort();		return port.processShipment(processShipmentRequest);	}		public String substr(String string, int min, int max) {		if (string.length() > max) {			return string.substring(min, max);		}		else {			return string;		}	}*/}