/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package com.elektra.fedex;import java.io.ByteArrayOutputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Locale;import java.util.logging.Level;import java.util.logging.Logger;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Marshaller;import javax.xml.ws.BindingProvider;import com.elektra.beans.CredencialesTrackingFedex;import com.elektra.beans.DatosTracking;import com.elektra.beans.TrackingResponse;import com.elektra.dao.GeneralDao;import com.elektra.dao.GeneralDaoImpl;import com.elektra.dao.TrackingDao;import com.elektra.dao.TrackingDaoImpl;import com.fedex.ws.track.v12.ClientDetail;import com.fedex.ws.track.v12.NotificationSeverityType;import com.fedex.ws.track.v12.TrackIdentifierType;import com.fedex.ws.track.v12.TrackPackageIdentifier;import com.fedex.ws.track.v12.TrackReply;import com.fedex.ws.track.v12.TrackRequest;import com.fedex.ws.track.v12.TrackSelectionDetail;import com.fedex.ws.track.v12.TrackingDateOrTimestamp;import com.fedex.ws.track.v12.TrackingDateOrTimestampType;import com.fedex.ws.track.v12.VersionId;import com.fedex.ws.track.v12.WebAuthenticationCredential;import com.fedex.ws.track.v12.WebAuthenticationDetail;/** * * * * @author dparra * */public class TrackingFedex {    TrackingDao trackingDao = new TrackingDaoImpl();    GeneralDao generalDao = new GeneralDaoImpl();    public TrackingResponse getTracking(DatosTracking datosTracking, CredencialesTrackingFedex credencialesTrackingFedex, String proxy) {        ByteArrayOutputStream in = new ByteArrayOutputStream();        SimpleDateFormat outFormat = new SimpleDateFormat("dd/MM/yyyy", new Locale("es", "ES"));        String request = "";        String response = "";        TrackingResponse trackingResponse = new TrackingResponse();        String ipProxy = proxy;        //ipProxy = "10.50.8.20";        //ipProxy = "10.20.22.21";        //System.setProperty("java.net.useSystemProxies", "true");   	         System.setProperty("http.proxyHost", ipProxy);        System.setProperty("http.proxyPort", "8080");        System.setProperty("https.proxyHost", ipProxy);        System.setProperty("https.proxyPort", "8080");        //System.setProperty("http.proxyUser","ELEKTRA\\EACEVES");        //System.setProperty("http.proxyPassword","Kiminodaisukidesupeach040");        //System.setProperty("https.proxyUser","ELEKTRA\\EACEVES");        //System.setProperty("https.proxyPassword","Kiminodaisukidesupeach040");        try {            TrackReply trackReply = new TrackReply();            WebAuthenticationCredential userCredential = new WebAuthenticationCredential();            userCredential.setKey(credencialesTrackingFedex.getKey());            userCredential.setPassword(credencialesTrackingFedex.getPassword());            WebAuthenticationDetail webAuthenticationDetail = new WebAuthenticationDetail();            webAuthenticationDetail.setParentCredential(null);            webAuthenticationDetail.setUserCredential(userCredential);            ClientDetail clientDetail = new ClientDetail();            clientDetail.setAccountNumber(credencialesTrackingFedex.getAccountNumber());            clientDetail.setMeterNumber(credencialesTrackingFedex.getMeterNumber());            VersionId versionId = new VersionId();            versionId.setServiceId(credencialesTrackingFedex.getServiceId());            versionId.setMajor(Integer.parseInt(credencialesTrackingFedex.getMajor()));            versionId.setIntermediate(Integer.parseInt(credencialesTrackingFedex.getIntermediate()));            versionId.setMinor(Integer.parseInt(credencialesTrackingFedex.getMinor()));            List<TrackSelectionDetail> trackSelectionDetail = new ArrayList<>();            TrackIdentifierType trackIdentifierType = null;            TrackPackageIdentifier trackPackageIdentifier = new TrackPackageIdentifier();            trackPackageIdentifier.setType(trackIdentifierType.TRACKING_NUMBER_OR_DOORTAG);            trackPackageIdentifier.setValue(datosTracking.getNumGuia());            TrackSelectionDetail selectionDetail = new TrackSelectionDetail();            selectionDetail.setPackageIdentifier(trackPackageIdentifier);            trackSelectionDetail.add(selectionDetail);            TrackRequest trackRequest = new TrackRequest();            trackRequest.setWebAuthenticationDetail(webAuthenticationDetail);            trackRequest.setVersion(versionId);            trackRequest.setClientDetail(clientDetail);            trackRequest.setTransactionDetail(null);            trackRequest.setSelectionDetails(trackSelectionDetail);            trackReply = track(trackRequest);            JAXBContext jaxbContext;            try {                jaxbContext = JAXBContext.newInstance(TrackRequest.class);                Marshaller jaxbMarshaller = jaxbContext.createMarshaller();                jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);                in = new ByteArrayOutputStream();                jaxbMarshaller.marshal(trackRequest, in);                request = new String(in.toByteArray());                jaxbContext = JAXBContext.newInstance(TrackReply.class);                jaxbMarshaller = jaxbContext.createMarshaller();                jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);                in = new ByteArrayOutputStream();                jaxbMarshaller.marshal(trackReply, in);                response = new String(in.toByteArray());            } catch (JAXBException ex) {                Logger.getLogger(TrackingFedex.class.getName()).log(Level.SEVERE, null, ex);            }            if (trackReply.getHighestSeverity() == NotificationSeverityType.FAILURE || trackReply.getHighestSeverity() == NotificationSeverityType.ERROR) {                trackingResponse.setIdEstatusGuia(-1);                trackingResponse.setIdEstatusGuiaCarrier(null);                trackingResponse.setRefField1(trackReply.getNotifications().get(0).getCode());                //trackingDao.insXml("-1", trackReply.getNotifications().get(0).getCode(), trackReply.getNotifications().get(0).getMessage(), request, response, datosTracking, "Tracking");                generalDao.insXml("-1", trackReply.getNotifications().get(0).getCode(), trackReply.getNotifications().get(0).getMessage(), request, response, datosTracking.getPedido(), datosTracking.getOrderId(), datosTracking.getCdId(), datosTracking.getIdCarrier(), "Tracking Fedex", datosTracking.getRef_field_2());            } else {                if (trackReply.getCompletedTrackDetails().get(0).getTrackDetails().size() > 0 && trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode().equals("0")) {                    trackingResponse.setIdEstatusGuia(trackingDao.getIdEstatusGuia(datosTracking.getIdCarrier(), trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getStatusDetail().getCode()));                    trackingResponse.setIdEstatusGuiaCarrier(trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getStatusDetail().getCode());                    trackingResponse.setRefField1(null);                    if (trackingResponse.getIdEstatusGuiaCarrier().equals("DL")) {                        trackingResponse.setRecibe(trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDeliverySignatureName());                        //trackingResponse.setFechaRecepcion(trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes());                        List<TrackingDateOrTimestamp> dates = trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes();                        for (int i = 0; i < dates.size(); i++) {                            if (dates.get(i).getType().value().equals("ACTUAL_DELIVERY")) {                                String fecha = trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes().get(i).getDateOrTimestamp().toString();                                String fecha2 = fecha.substring(8, 10) + "/" + fecha.substring(5, 7) + "/" + fecha.substring(0, 4) + " " + fecha.substring(11, 16);                                trackingResponse.setFechaRecepcion(fecha2);                            }                            if (dates.get(i).getType().value().equals("ACTUAL_PICKUP")) {                                String fecha = trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes().get(i).getDateOrTimestamp().toString();                                String fecha2 = fecha.substring(8, 10) + "/" + fecha.substring(5, 7) + "/" + fecha.substring(0, 4) + " " + fecha.substring(11, 16);                                trackingResponse.setFechaRecoleccion(fecha2);                            }                        }                    }                    if (trackingResponse.getIdEstatusGuiaCarrier().equals("FD") || trackingResponse.getIdEstatusGuiaCarrier().equals("DP")) {                        List<TrackingDateOrTimestamp> dates = trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes();                        for (int i = 0; i < dates.size(); i++) {                            if (dates.get(i).getType().value().equals("ACTUAL_PICKUP")) {                                String fecha = trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getDatesOrTimes().get(i).getDateOrTimestamp().toString();                                String fecha2 = fecha.substring(8, 10) + "/" + fecha.substring(5, 7) + "/" + fecha.substring(0, 4) + " " + fecha.substring(11, 16);                                trackingResponse.setFechaRecoleccion(fecha2);                            }                        }                    }                    /*                    if(!trackingResponse.getIdEstatusGuiaCarrier().equals("FD") && !trackingResponse.getIdEstatusGuiaCarrier().equals("DL")&& !trackingResponse.getIdEstatusGuiaCarrier().equals("DP")) {                    	System.out.println(trackingResponse.getIdEstatusGuiaCarrier());                    	System.out.println(response);                    }*/                } else if (trackReply.getCompletedTrackDetails().get(0).getTrackDetails().size() > 0 && trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode().equals("9040")) {                    // DO NOTHING                    trackingResponse.setIdEstatusGuia(0);                    trackingResponse.setIdEstatusGuiaCarrier(trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode());                    trackingResponse.setRefField1("DO NOTHING");                } else {                    trackingResponse.setIdEstatusGuia(-1);                    trackingResponse.setIdEstatusGuiaCarrier(null);                    trackingResponse.setRefField1(trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode());                    //trackingDao.insXml("-1", trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode(), trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getMessage(), request, response, datosTracking, "Tracking");                    generalDao.insXml("-1", trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getCode(), trackReply.getCompletedTrackDetails().get(0).getTrackDetails().get(0).getNotification().getMessage(), request, response, datosTracking.getPedido(), datosTracking.getOrderId(), datosTracking.getCdId(), datosTracking.getIdCarrier(), "Tracking Fedex", datosTracking.getRef_field_2());                }            }        } catch (Exception e) {            trackingResponse.setIdEstatusGuia(-1);            trackingResponse.setIdEstatusGuiaCarrier(null);            trackingResponse.setRefField1(e.toString());        }        return trackingResponse;    }    private static TrackReply track(com.fedex.ws.track.v12.TrackRequest trackRequest) {        com.fedex.ws.track.v12.TrackService service = new com.fedex.ws.track.v12.TrackService();        com.fedex.ws.track.v12.TrackPortType port = service.getTrackServicePort();        String endpointURL = "https://ws.fedex.com:443/web-services";        BindingProvider bp = (BindingProvider) port;        bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);        return port.track(trackRequest);    }}