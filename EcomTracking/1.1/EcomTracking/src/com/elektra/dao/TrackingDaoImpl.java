/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package com.elektra.dao;import com.elektra.beans.DatosTracking;import com.elektra.beans.TrackingResponse;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;import com.elektra.util.Conexion;/** * * @author dparra */public class TrackingDaoImpl implements TrackingDao{    Conexion con = new Conexion();    @Override    public List<DatosTracking> getTrackingData() {                List<DatosTracking> datosTrackingList = new ArrayList<>();        PreparedStatement stmt = null;                try {            this.con.startConexion();            stmt = this.con.getConexion().prepareStatement(                    "SELECT NUM_GUIA ,\n" +                    "  ID_CARRIER ,\n" +                    "  ORDER_ID ,\n" +                    "  CD_ID ,\n" +                    "  PEDIDO ,\n" +                    "  ID_ESTATUS_GUIA ,\n" +                    "  ID_ESTATUS_GUIA_CARRIER ,\n" +                    "  REF_FIELD_2\n" +                    "FROM INFO_CD.CE_CONTROL_GUIAS\n" +                    "WHERE 1=1\n" +                    "AND ID_ESTATUS_GUIA IN( 10, 20 )\n" +                    "AND NVL(ID_ESTATUS_GUIA_CARRIER, 'X') NOT IN ('CANCELADO')\n" +                    "AND TRUNC(FECHA_CREACION) >= TRUNC(SYSDATE)-30\n" +                    "AND ID_CARRIER NOT IN( 8 )  --\\\" //Tovares Elektra\n" +                    "AND ID_CARRIER NOT IN( 11 ) --\\\" //Ektnvia\n" +                    "--AND num_guia IN (     --'211105739888'\n" +                    "  --'9058668888651702673287', '211109172347', '782562549495', '000000000643866' \n" +                    "  --/*'211110003286','6058668888651702673090','3058668888651702673327','3058668888651702673360',*/'000000000639986'\n" +                    "--  )\n" +                    "AND cd_id IN\n" +                    "  (\n" +                    "  SELECT almmn FROM info_Cd.e3altwhs WHERE lslib = 'MX' AND desjd LIKE 'CD%'\n" +                    "  )\n" +                    "UNION\n" +                    "SELECT NUM_GUIA ,\n" +                    "  ID_CARRIER ,\n" +                    "  ORDER_ID ,\n" +                    "  CD_ID ,\n" +                    "  PEDIDO ,\n" +                    "  ID_ESTATUS_GUIA ,\n" +                    "  ID_ESTATUS_GUIA_CARRIER ,\n" +                    "  REF_FIELD_2\n" +                    "FROM INFO_CD.CE_CONTROL_GUIAS\n" +                    "WHERE 1=1\n" +                    "  AND ID_ESTATUS_GUIA IN( 10, 20 )\n" +                    "AND NVL(ID_ESTATUS_GUIA_CARRIER, 'X') NOT IN ('CANCELADO')\n" +                    "AND TRUNC(FECHA_CREACION) >= TRUNC(SYSDATE)-30\n" +                    "AND cd_id NOT IN\n" +                    "  (\n" +                    "  SELECT almmn FROM info_Cd.e3altwhs WHERE lslib = 'MX' AND desjd LIKE 'CD%'\n" +                    "  )\n" +                    "--AND num_guia IN (--'211105739888'\n" +                    "  --'9058668888651702673287', '211109172347', '782562549495', '000000000643866' \n" +                    "  --/*'211110003286','6058668888651702673090','3058668888651702673327','3058668888651702673360',*/'000000000639986'\n" +                    "--  )\n" +                    "ORDER BY ID_CARRIER "            );            ResultSet rs = stmt.executeQuery();                        while (rs.next()){                DatosTracking datosTracking = new DatosTracking();                datosTracking.setCdId(rs.getInt("CD_ID"));                datosTracking.setIdCarrier(rs.getInt("ID_CARRIER"));                datosTracking.setNumGuia(rs.getString("NUM_GUIA"));                datosTracking.setOrderId(rs.getString("ORDER_ID"));                datosTracking.setPedido(rs.getString("PEDIDO"));                datosTracking.setRef_field_2(rs.getString("REF_FIELD_2"));                                datosTrackingList.add(datosTracking);            }                                  } catch (SQLException ex) {            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return datosTrackingList;         }                    }    @Override    public int getIdEstatusGuia(int idCarrier, String idEstatusGuiaCarrier) {        int idEstatusGuia=0;        PreparedStatement stmt = null;         try {                         this.con.startConexion();                        stmt = this.con.getConexion().prepareStatement(                    " SELECT ID_ESTATUS_GUIA "                            + " FROM INFO_CD.CE_ESTANDARES_ESTATUS "                             + " WHERE ID_CARRIER =   ?   "                             + " AND ID_ESTATUS_GUIA_CARRIER =   ?   "            );                        stmt.setInt(1, idCarrier);            stmt.setString(2, idEstatusGuiaCarrier);                        ResultSet rs = stmt.executeQuery();                        while (rs.next()){                idEstatusGuia = rs.getInt("ID_ESTATUS_GUIA");            }        } catch (SQLException ex) {            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return idEstatusGuia;         }    }    @Override    public int actIdEstatusGuia(TrackingResponse trackingResponse, DatosTracking datosTracking) {        int actualizados=0;        PreparedStatement stmt = null;        String query = " UPDATE INFO_CD.CE_CONTROL_GUIAS " +                " SET ID_ESTATUS_GUIA = NVL(   ?   ,  ID_ESTATUS_GUIA),  PERSONA_RECIBE = ? ";                query += (trackingResponse.getFechaRecoleccion() == null) ? " ":", fecha_recoleccion = case when fecha_recoleccion is null then to_date('"+trackingResponse.getFechaRecoleccion()+"','DD/MM/YYYY hh24:mi:ss') else fecha_recoleccion end ";        query += (trackingResponse.getFechaRecepcion() == null) ? " ":", fecha_recibe = to_date('"+trackingResponse.getFechaRecepcion()+"','DD/MM/YYYY hh24:mi:ss') ";        query += (trackingResponse.getRefField3() == null) ? ", REF_FIELD_3 = null ":", REF_FIELD_3 = '"+trackingResponse.getRefField3()+" ";                                query +=  " ,ID_ESTATUS_GUIA_CARRIER =   ?   " +                " ,FECHA_MODIFICACION = SYSDATE " +                " ,USUARIO_MODIFICACION  = 'TRACKING' " +                " ,REF_FIELD_1 = NULL " +                " WHERE  NUM_GUIA =   ?   " +                " AND ID_CARRIER =   ?   " +                " AND PEDIDO =   ?   " +                " AND ORDER_ID =   ?   " +                " AND CD_ID =   ?   " +                " AND REF_FIELD_2 = ? ";                //" AND ( ID_ESTATUS_GUIA <> NVL(   ?   ,  ID_ESTATUS_GUIA) OR ID_ESTATUS_GUIA_CARRIER <>   ?   )";                                                      try {                         this.con.startConexion();                        stmt = this.con.getConexion().prepareStatement(query);                        stmt.setInt(1, trackingResponse.getIdEstatusGuia());            stmt.setString(2, trackingResponse.getRecibe());            stmt.setString(3, trackingResponse.getIdEstatusGuiaCarrier());            stmt.setString(4, datosTracking.getNumGuia());            stmt.setInt(5, datosTracking.getIdCarrier());            stmt.setString(6, datosTracking.getPedido());            stmt.setString(7, datosTracking.getOrderId());            stmt.setInt(8, datosTracking.getCdId());            stmt.setString(9, datosTracking.getRef_field_2());            //stmt.setInt(9, trackingResponse.getIdEstatusGuia());            //stmt.setString(10, trackingResponse.getIdEstatusGuiaCarrier());                        actualizados = stmt.executeUpdate();            this.con.getConexion().commit();                    } catch (SQLException ex) {            this.con.getConexion().rollback();            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return actualizados;         }            }    @Override    public int actIdEstatusGuiaDoNothing(TrackingResponse trackingResponse, DatosTracking datosTracking) {        int actualizados=0;        PreparedStatement stmt = null;         try {                         this.con.startConexion();                        stmt = this.con.getConexion().prepareStatement(                    " UPDATE INFO_CD.CE_CONTROL_GUIAS " +                    " SET FECHA_MODIFICACION = SYSDATE,  USUARIO_MODIFICACION = 'TRACKING' " +//, ID_ESTATUS_GUIA_CARRIER =   ?   " +                    " WHERE NUM_GUIA =   ?   " +                    " AND ID_CARRIER = ? " +                    " AND PEDIDO =   ?   " +                    " AND ORDER_ID =   ?    " +                    " AND CD_ID =   ?   "                     //" AND  NVL(ID_ESTATUS_GUIA_CARRIER, 'X') <>   ?   "            );                        //stmt.setString(1, trackingResponse.getIdEstatusGuiaCarrier());            stmt.setString(1, datosTracking.getNumGuia());            stmt.setInt(2, datosTracking.getIdCarrier());            stmt.setString(3, datosTracking.getPedido());            stmt.setString(4, datosTracking.getOrderId());            stmt.setInt(5, datosTracking.getCdId());            //stmt.setString(6, trackingResponse.getIdEstatusGuiaCarrier());                        actualizados = stmt.executeUpdate();            this.con.getConexion().commit();                    } catch (SQLException ex) {            this.con.getConexion().rollback();            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return actualizados;         }    }    @Override    public int actIdEstatusGuiaError(TrackingResponse trackingResponse, DatosTracking datosTracking) {        int actualizados=0;        PreparedStatement stmt = null;         try {                         this.con.startConexion();                        stmt = this.con.getConexion().prepareStatement(                    " UPDATE INFO_CD.CE_CONTROL_GUIAS " +                    " SET REF_FIELD_1 = substr(   ?   , 1, 200)" +                    " , FECHA_MODIFICACION = SYSDATE " +                    " , USUARIO_MODIFICACION = 'TRACKING' " +                    " WHERE NUM_GUIA =   ?   " +                    " AND ID_CARRIER =   ?   "            );                        stmt.setString(1, trackingResponse.getRefField1());            stmt.setString(2, datosTracking.getNumGuia());            stmt.setInt(3, datosTracking.getIdCarrier());                        actualizados = stmt.executeUpdate();            this.con.getConexion().commit();                    } catch (SQLException ex) {            this.con.getConexion().rollback();            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return actualizados;         }    }        public String getCredencialesGrales() {		PreparedStatement stmt = null;        		ResultSet rs = null;		String proxy = ""; 		String query = "select ref_field_1 from info_cd.ce_credenciales_ws where id_carrier = 1";		        try {            this.con.startConexion();                                    stmt = this.con.getConexion().prepareStatement(query);            rs = stmt.executeQuery();            //si existe el resultado es true se puede continuar              if (rs.next())             	proxy= rs.getString("REF_FIELD_1");                                                                 }catch(Exception ex){                   System.out.println("Error al obtener proxy:\n"+ex.getMessage());        }                this.con.endConnection();                        return proxy;	}    }