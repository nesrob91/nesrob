/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package com.elektra.dao;import java.sql.Clob;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;import com.elektra.util.Conexion;/** * * @author dparra */public class GeneralDaoImpl implements GeneralDao{        Conexion con = new Conexion();    @Override    public List<String> getGrupos() {        List<String> grupos = new ArrayList<>();        grupos.add("DOMFP4");        PreparedStatement stmt = null;                try {            this.con.startConexion();            stmt = this.con.getConexion().prepareStatement(                    " SELECT DISTINCT GRPMH " +                    " FROM INFO_CD.E3ALTWHS " +                    " WHERE LSLIB = 'MX' AND DESJD NOT LIKE 'DS%' AND DESJD NOT LIKE  'DR%' " +                    " ORDER BY GRPMH "            );            ResultSet rs = stmt.executeQuery();                        while (rs.next()){                grupos.add(rs.getString("GRPMH"));            }                                  } catch (SQLException ex) {            Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);        }        finally{             this.con.endConnection();             return grupos;         }            }    @Override    public int insXml(String codigo, String resultado, String descripcion, String request, String response, String pedido, String orderId, int cdId, int idCarrier, String operacion, String idCajaHdr) {        int insertados=0;        Clob clobRequest=null;        Clob clobResponse=null;        PreparedStatement stmt = null;                 try {                        this.con.startConexion();            clobRequest = oracle.sql.CLOB.createTemporary(con.getConexion(), false, oracle.sql.CLOB.DURATION_SESSION);            clobRequest.setString(1, request);                        clobResponse = oracle.sql.CLOB.createTemporary(con.getConexion(), false, oracle.sql.CLOB.DURATION_SESSION);            clobResponse.setString(1, response);                        stmt = this.con.getConexion().prepareStatement(                    " INSERT INTO INFO_CD.CE_RESULT_GUIAS_WS " +                    " (PEDIDO, ORDER_ID, CD_ID, ID_CARRIER, FECHA_CREACION, CODIGO, RESULTADO, DESCRIPCION, XML_INPUT, XML_OUTPUT_CLOB, OPERACION, REF_FIELD_2) " +                    " VALUES  (   ?   ,    ?   ,   ?   ,   ?   , SYSDATE,   ?   , SUBSTR(  ?   , 0, 100), SUBSTR(  ?   , 0, 100), TO_CLOB(   ?   ), TO_CLOB(   ?   ),   ?  ,?  ) "            );                        stmt.setString(1, pedido);            stmt.setString(2, orderId);            stmt.setInt(3, cdId);            stmt.setInt(4, idCarrier);            stmt.setString(5, codigo);            stmt.setString(6, resultado);            stmt.setString(7, descripcion);            stmt.setClob(8, clobRequest);            stmt.setClob(9, clobResponse);            stmt.setString(10, operacion);            stmt.setString(11, idCajaHdr);                        insertados = stmt.executeUpdate();            this.con.getConexion().commit();                    } catch (SQLException ex) {            this.con.getConexion().rollback();             System.out.println("Excepci√≥n: "+ ex.toString());        }        finally{             this.con.endConnection();             return insertados;         }    }    }